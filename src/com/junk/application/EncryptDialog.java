package com.junk.application;

import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.security.auth.callback.ConfirmationCallback;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Elmer
 */
public class EncryptDialog extends javax.swing.JDialog {

    private Thread progressThread = null;
    private JFileChooser fileChooser = new JFileChooser();;
    private File selectedFile = null;
    private File tempFile = null;
    private String password = null;
    private MainForm mainformParent;
    /**
     * Creates new form EncryptDialog
     */
    public EncryptDialog(java.awt.Frame parent, MainForm mainformParent, boolean modal) {
        super(parent, modal);
        this.mainformParent = mainformParent;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        lblFile = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        txtFile = new javax.swing.JTextField();
        btnBrowse = new javax.swing.JButton();
        lblInfo = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();
        btnEncrypt = new javax.swing.JButton();
        encryptionProgress = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Encrypt a File");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lblFile.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        lblFile.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblFile.setText("File : ");

        lblPassword.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        lblPassword.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPassword.setText("Password : ");

        txtPassword.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        txtPassword.setEnabled(false);
        txtPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPasswordKeyReleased(evt);
            }
        });

        txtFile.setEditable(false);
        txtFile.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N

        btnBrowse.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        btnBrowse.setText("...");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        lblInfo.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        lblInfo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblInfo.setText("Please select a file . .");

        btnCancel.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        btnCancel.setText("Close");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnEncrypt.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        btnEncrypt.setText("Encrypt");
        btnEncrypt.setEnabled(false);
        btnEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncryptActionPerformed(evt);
            }
        });

        encryptionProgress.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        encryptionProgress.setStringPainted(true);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(lblFile)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFile)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnBrowse))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                                .addComponent(lblPassword)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPassword))
                            .addComponent(encryptionProgress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnEncrypt)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCancel)))
                        .addGap(15, 15, 15))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 657, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(7, 7, 7))
        );

        mainPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblFile, lblPassword});

        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(lblInfo)
                .addGap(15, 15, 15)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFile)
                    .addComponent(txtFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrowse))
                .addGap(15, 15, 15)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnEncrypt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(encryptionProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        mainPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnBrowse, lblFile, lblInfo, lblPassword, txtFile, txtPassword});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int option = fileChooser.showOpenDialog(this);
        if (option == 0) {
            lblInfo.setText("Please enter password");
            txtPassword.setEnabled(true);
            txtPassword.requestFocus();
            selectedFile = fileChooser.getSelectedFile();
            txtFile.setText(fileChooser.getSelectedFile().getAbsolutePath());
        } else {
            selectedFile = null;
            txtPassword.setEnabled(false);
        }
    }//GEN-LAST:event_btnBrowseActionPerformed

    private void txtPasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPasswordKeyReleased
        if (txtPassword.getText().length() < 8) {
            lblInfo.setText("Password must be greater than 8 characters.");
            lblInfo.setForeground(Color.red);
            btnEncrypt.setEnabled(false);
        } else {
            lblInfo.setText("Password is okay");
            lblInfo.setForeground(Color.green);
            btnEncrypt.setEnabled(true);
        }
    }//GEN-LAST:event_txtPasswordKeyReleased

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        try {
            onCancel();
        } catch (IOException ex) {
            Logger.getLogger(EncryptDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncryptActionPerformed
        encryptionProgress.setVisible(true);
        String tempFile = UUID.randomUUID().toString() + ".denc";
        this.tempFile = new File("encrypted/"+tempFile);
        this.password = txtPassword.getText();
        try {
            encrypt(password, selectedFile, this.tempFile);
        } catch (Exception ex) {
            Logger.getLogger(EncryptDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnEncryptActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            onCancel();
        } catch (IOException ex) {
            Logger.getLogger(EncryptDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosing
    
    public void encrypt(String key, File src, File dest) {

        progressThread = new Thread(() -> {
            try {
                DesUtils.encrypt(key, new FileInputStream(src), new FileOutputStream(dest), src, encryptionProgress);
            } catch (Exception ex) {
                Logger.getLogger(EncryptDialog.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                if (encryptionProgress.getValue() == 100) {
                    JOptionPane.showMessageDialog(this, "Encryption is done.", "Successful", JOptionPane.INFORMATION_MESSAGE);
                    onDone();
                }
            }

        });
        progressThread.start();

    }
    
    private void onDone(){
        try {
            CommonUtils.saveData(mainformParent.dataMap, new DencFile(selectedFile.getName(), String.valueOf(selectedFile.length()), password, tempFile.getName()));
            if(selectedFile.exists() && selectedFile.delete()) {
                System.out.println(selectedFile.getAbsolutePath() + " is deleted.");
            }
            mainformParent.readData();
            dispose();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    /**
     * on cancel of the process , closes running thread and input streams and
     * output streams
     *
     * @throws IOException
     */
    private void onCancel() throws IOException {
        if (progressThread != null) {
            progressThread.suspend();
            int option = JOptionPane.showConfirmDialog(this, "Encryption is in progress, Are you sure to cancel?", "Confirmation", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (option == ConfirmationCallback.YES) {
                dispose();
                progressThread.stop();
            } else {
                progressThread.resume();
            }
        } else {
            if (progressThread != null) {
                progressThread.stop();
            }
            dispose();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnEncrypt;
    private javax.swing.JProgressBar encryptionProgress;
    private javax.swing.JLabel lblFile;
    private javax.swing.JLabel lblInfo;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextField txtFile;
    private javax.swing.JPasswordField txtPassword;
    // End of variables declaration//GEN-END:variables
}
