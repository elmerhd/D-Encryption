package open.elmerhd.d.encryption;

import java.awt.Desktop;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.security.auth.callback.ConfirmationCallback;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author elmerhd
 */
public class DecryptDialog extends javax.swing.JDialog {
   private Thread progressThread = null;
    private JFileChooser fileChooser = new JFileChooser();;
    private File selectedFile = null;
    private File tempFile = null;
    private String password = null;
    private MainForm mainformParent;
    private String file2Decrypt;
    /**
     * Creates new form DecryptedDialog
     */
    public DecryptDialog(java.awt.Frame parent, MainForm mainformParent, boolean modal, String file2decrypt) {
        super(parent, modal);
        initComponents();
        this.mainformParent = mainformParent;
        this.file2Decrypt = file2decrypt;
        decryptionProgress.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        decryptionProgress = new javax.swing.JProgressBar();
        txtPassword = new javax.swing.JPasswordField();
        lblPassword = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();
        btnDecrypt = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Decrypt a File");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        decryptionProgress.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        decryptionProgress.setPreferredSize(new java.awt.Dimension(146, 27));
        decryptionProgress.setStringPainted(true);

        txtPassword.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N

        lblPassword.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        lblPassword.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPassword.setText("Password : ");

        btnCancel.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        btnCancel.setText("Close");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnDecrypt.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        btnDecrypt.setText("Decrypt");
        btnDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecryptActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDecrypt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(lblPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(decryptionProgress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(10, 10, 10))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtPassword)
                    .addComponent(lblPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnDecrypt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(decryptionProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecryptActionPerformed
        if (mainformParent.dataMap.get(file2Decrypt).getPassword().equals(txtPassword.getText())){
            onSelectFile();
        } else {
            JOptionPane.showMessageDialog(this, "Incorrect Password!","Decryption Failed",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDecryptActionPerformed
    private void onSelectFile(){
        fileChooser.setSelectedFile(new File(mainformParent.dataMap.get(file2Decrypt).getOriginalFileName()));
        int opt = fileChooser.showSaveDialog(this);
        tempFile = new File("encrypted/" + mainformParent.dataMap.get(file2Decrypt).getTempFileName());
        selectedFile = fileChooser.getSelectedFile();
        password = txtPassword.getText();
        if (opt == 0) {
            decrypt(password, tempFile, selectedFile);
        }
    }
    private void decrypt(String key,File src,File dest){
        progressThread = new Thread(() -> {
            try {
                decryptionProgress.setVisible(true);
                DesUtils.decrypt(key, new FileInputStream(src), new FileOutputStream(dest), src, decryptionProgress);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }finally {
                if (decryptionProgress.getValue() == 100) {
                    JOptionPane.showMessageDialog(this, "Decryption is done.", "Successful", JOptionPane.INFORMATION_MESSAGE);
                    onDone();
                }
            }

        });
        progressThread.start();
    }
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        try {
            onCancel();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCancelActionPerformed
    
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            onCancel();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_formWindowClosing
    private void onDone(){
        try {
            CommonUtils.removeData(mainformParent.dataMap, file2Decrypt);
            if(tempFile.exists() && tempFile.delete()) {
                System.out.println(tempFile.getAbsolutePath() + " is deleted.");
            }
            mainformParent.btnDecrypt.setEnabled(false);
            mainformParent.readData();
            int opt = JOptionPane.showConfirmDialog(this, "Open file", "Confirmation", JOptionPane.YES_NO_OPTION);
            if (opt == ConfirmationCallback.YES) {
                Desktop.getDesktop().open(selectedFile);
            }
            dispose();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    /**
     * on cancel of the process , closes running thread and input streams and
     * output streams
     *
     * @throws IOException
     */
    private void onCancel() throws IOException {
        if (progressThread != null) {
            progressThread.suspend();
            int option = JOptionPane.showConfirmDialog(this, "Decryption is in progress, Are you sure to cancel?", "Confirmation", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (option == ConfirmationCallback.YES) {
                dispose();
                progressThread.stop();
            } else {
                progressThread.resume();
            }
        } else {
            if (progressThread != null) {
                progressThread.stop();
            }
            dispose();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDecrypt;
    private javax.swing.JProgressBar decryptionProgress;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPasswordField txtPassword;
    // End of variables declaration//GEN-END:variables
}
